##
# -------------------------------------------------------------------------  
#   Copyright (c) 2017 Hardware-Software-Co-Design, Friedrich-
#   Alexander-Universitaet Erlangen-Nuernberg (FAU), Germany.
#   All rights reserved.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# ------------------------------------------------------------------------- 
#                                                                                
#  @author  Streit Franz-Josef                                                    
#  @mail    franz-josef.streit@fau.de                                                   
#  @date    09 November 2017                                                      
#  @version 0.1                                                                  
#  @brief   Vivado tcl file for Block Design generation 
#                                                                                
#                                                                                
##

set MODELNAME "@model_name@"
set PART "@device@"
set PERIOD "@clk@"
set PROJNAME "Vivado_$MODELNAME"
set BUILDDIR "@build_dir@"

# Set paths to helper functions for TB generation
set tb_lib_dir "../lib/tbScripts"
set ipb_lib_dir "../lib/ipbScripts"

# Set IP repository paths
set VIVADOHLSIPPATHS "@ipRepo@"
set RUNTIME "../runtime"
set WRITEADAPTERPPATH "runtime/write_adapter"
set READADAPTERPPATH "runtime/read_adapter"

set hwswdesign "false"

#get frame size from dataflow file
source $tb_lib_dir/readDataflow.tcl

#generate hw objectives table from ip repository
source $ipb_lib_dir/extractHWObjectives.tcl

if {$hwswdesign == "true"} {
  if {[file isdirectory "runtime"] == 0} {
    # if HW/SW Co-Design copy read/write adapter into current directory
    puts "copy adapters to current folder"
    file copy $RUNTIME .
  } else {
    puts "adapters already exist in current folder"
  }  
}  

#Create project
create_project ${PROJNAME} ./${PROJNAME} -part ${PART}

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Set project properties
set obj [get_projects ${PROJNAME}]
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/$PROJNAME.cache/ip" -objects $obj
set_property -name "part" -value "$PART" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "VHDL" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

set_property "ip_repo_paths" "$VIVADOHLSIPPATHS [if {$hwswdesign} {list $WRITEADAPTERPPATH $READADAPTERPPATH}]" [current_project]

# Rebuild user ip_repo's index before adding any source files
update_ip_catalog -rebuild

# create block design
create_bd_design "design_1"

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
 }

 # Create 'sim_1' fileset (if not found)
 if {[string equal [get_filesets -quiet sim_1] ""]} {
   create_fileset -simset sim_1
}

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
  create_run -name synth_1 -part ${PART} -flow {Vivado Synthesis 2017} -strategy "Vivado Synthesis Defaults" -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2017" [get_runs synth_1]
 }
 set obj [get_runs synth_1]
 set_property -name "part" -value ${PART} -objects $obj

 # set the current synth run
 current_run -synthesis [get_runs synth_1]

 # Create 'impl_1' run (if not found)
 if {[string equal [get_runs -quiet impl_1] ""]} {
   create_run -name impl_1 -part ${PART} -flow {Vivado Implementation 2017} -strategy "Vivado Implementation Defaults" -constrset constrs_1 -parent_run synth_1
 } else {
   set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
   set_property flow "Vivado Implementation 2017" [get_runs impl_1]
     }
     set obj [get_runs impl_1]
     set_property -name "part" -value ${PART} -objects $obj
     set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
     set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

     # set the current impl run
     current_run -implementation [get_runs impl_1]

     # open the block design
     open_bd_design "$proj_dir/$PROJNAME.srcs/sources_1/bd/design_1/design_1.bd"
    
     if {$hwswdesign == "true"} {
      # create default IPBs for a HW/SW Co-Design
      # instanciate zynq processing system
      create_bd_cell -type ip -vlnv xilinx.com:ip:processing_system7 processing_system7_0
      # config zynq processing system
      set_property -dict [list CONFIG.PCW_FPGA0_PERIPHERAL_FREQMHZ [expr (1/($PERIOD*pow(10,-9))*pow(10,-6))] CONFIG.PCW_USE_S_AXI_HP0 {1} CONFIG.PCW_S_AXI_HP0_DATA_WIDTH {32}] [get_bd_cells processing_system7_0]
      set_property -dict [list CONFIG.PCW_QSPI_GRP_SINGLE_SS_ENABLE {1} CONFIG.PCW_TTC0_PERIPHERAL_ENABLE {0}] [get_bd_cells processing_system7_0]
      # add AXI Light interconnect
      create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect axi_interconnect_0
      # change interconnect to one Master
      set_property -dict [list CONFIG.NUM_SI {1} CONFIG.NUM_MI {1}] [get_bd_cells axi_interconnect_0]
      # add AXI Stream smartconnect
      create_bd_cell -type ip -vlnv xilinx.com:ip:smartconnect smartconnect_0
      # change smartconnect to one Slave
      set_property -dict [list CONFIG.NUM_SI {1} CONFIG.NUM_MI {1}] [get_bd_cells smartconnect_0]
      # add processor reset system
      create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset proc_sys_reset_0
      # make DDR and FIXED_IO external
      apply_bd_automation -rule xilinx.com:bd_rule:processing_system7 -config {make_external "FIXED_IO, DDR" apply_board_preset "1" Master "Disable" Slave "Disable" }  [get_bd_cells processing_system7_0]
      # connect processor clock to default IPBs
      set clockport [get_bd_pins processing_system7_0/FCLK_CLK0]
      connect_bd_net $clockport [get_bd_pins processing_system7_0/S_AXI_HP0_ACLK]
      connect_bd_net $clockport [get_bd_pins processing_system7_0/M_AXI_GP0_ACLK]
      connect_bd_net $clockport [get_bd_pins axi_interconnect_0/ACLK]
      connect_bd_net $clockport [get_bd_pins axi_interconnect_0/S00_ACLK]
      connect_bd_net $clockport [get_bd_pins axi_interconnect_0/M00_ACLK]
      connect_bd_net $clockport [get_bd_pins smartconnect_0/aclk]
      connect_bd_net $clockport [get_bd_pins proc_sys_reset_0/slowest_sync_clk]
      # connect processor reset to processor reset system
      connect_bd_net [get_bd_pins proc_sys_reset_0/ext_reset_in] [get_bd_pins processing_system7_0/FCLK_RESET0_N]
      # connect processor reset system to default IPBs
      set rstport [get_bd_pins proc_sys_reset_0/peripheral_aresetn]
      connect_bd_net [get_bd_pins axi_interconnect_0/ARESETN] [get_bd_pins proc_sys_reset_0/interconnect_aresetn]
      connect_bd_net [get_bd_pins smartconnect_0/aresetn] [get_bd_pins proc_sys_reset_0/peripheral_aresetn]
      connect_bd_net [get_bd_pins axi_interconnect_0/S00_ARESETN] [get_bd_pins proc_sys_reset_0/peripheral_aresetn] 
      connect_bd_net [get_bd_pins axi_interconnect_0/M00_ARESETN] [get_bd_pins proc_sys_reset_0/peripheral_aresetn]
      # connect GP0 bus to AXI interconnect
      connect_bd_intf_net [get_bd_intf_pins processing_system7_0/M_AXI_GP0] -boundary_type upper [get_bd_intf_pins axi_interconnect_0/S00_AXI]
      # connect HP0 bus to multiplexer
      connect_bd_intf_net [get_bd_intf_pins smartconnect_0/M00_AXI] [get_bd_intf_pins processing_system7_0/S_AXI_HP0]
     } else {
      # create clock port
      create_bd_port -dir I -type clk clk
      set clockport [get_bd_ports clk]
      set_property CONFIG.FREQ_HZ [expr 1/($PERIOD*pow(10,-9))] $clockport

      #create active high reset port
      create_bd_port -dir I -type rst rst
      set rstport [get_bd_ports rst]
      set_property CONFIG.POLARITY ACTIVE_LOW $rstport
     }

    # set ip_cores [glob -directory ${VIVADOHLSIPPATHS} -type d *]
    # foreach ip_core ${ip_cores} {
    #   set ip_name [file tail $ip_core]
    #   if {[get_bd_pins -of [get_bd_cells ${ip_name}] -filter {NAME == "ap_start"}]=="${ip_name}/ap_start"} {
    #     # instantiate constant true
    #     create_bd_cell -type ip -vlnv xilinx.com:ip:xlconstant:1.1 ap_start_const
    #     set_property -dict [list CONFIG.CONST_WIDTH {1} CONFIG.CONST_VAL {1}] [get_bd_cells ap_start_const]
    #     break
    #   }
    # }

     # Instantiate IPBs and make default connections
     set ip_cores [glob -directory ${VIVADOHLSIPPATHS} -type d *]
     foreach ip_core ${ip_cores} {
       set ip_name [file tail $ip_core]
       # instantiate IPB on blockdesign
       puts "Instantiate ${ip_name} on blockdesign"
       create_bd_cell -type ip -vlnv FAU:simulink_blocks:${ip_name}:1.0 ${ip_name}
       if {[catch {
       # clock HLS IPB
        connect_bd_net -quiet $clockport [get_bd_pins ${ip_name}/ap_clk] 
       }]} {}
       if {[catch {
       # clock Chip IPB
        connect_bd_net -quiet $clockport [get_bd_pins ${ip_name}/clk] 
       }]} {}
       if {[catch {
       # reset HLS IPB
        connect_bd_net -quiet $rstport [get_bd_pins ${ip_name}/ap_rst_n]
       }]} {}
       if {[catch {
       # reset Chip IPB
        connect_bd_net -quiet $rstport [get_bd_pins ${ip_name}/rst]
       }]} {}
    }

    # Iterate over the dataflow graph
    set read_cnt 0
    set write_cnt 0
    set adapter_cnt 0
    # here in the global variable lines we have the connections of the ip blocks
    foreach nl $::lines { 
      puts "Connection: $nl"
      # Split into fields on ->
      set fields [split $nl "->"]
      # check if line is longer than 3 characters like a->b
      if {[string length $fields] > 3} {
         # extract source and sink IPB
         set src_block [lindex $fields 0]
         set sink_block [lindex $fields 2]
         if {$src_block =="sw"} {
            if {[llength read_adapter] > 0} {
              if {$adapter_cnt >0} {
                set_property -dict [list CONFIG.NUM_MI [expr [get_property CONFIG.NUM_MI [get_bd_cells axi_interconnect_0]] + 1]] [get_bd_cells axi_interconnect_0]
                connect_bd_net $clockport [get_bd_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2]_ACLK]
                connect_bd_net [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2]_ARESETN]
                set_property -dict [list CONFIG.NUM_SI [expr [get_property CONFIG.NUM_SI [get_bd_cells smartconnect_0]] + 1]] [get_bd_cells smartconnect_0]
              }
              # generate read adapter to read from memory
              puts "create read_adapter [lindex $read_adapter $read_cnt]"   
              set datawidth [expr 8 * [get_property CONFIG.TDATA_NUM_BYTES [get_bd_intf_pins ${sink_block}]]]
              create_bd_cell -type ip -vlnv FAU:smoc_synth:read_adapter reg_[lindex $read_adapter $read_cnt]
              create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dma dma_[lindex $read_adapter $read_cnt]
              set_property -dict [list CONFIG.c_include_sg {0} CONFIG.c_sg_include_stscntrl_strm {0} CONFIG.c_m_axis_mm2s_tdata_width ${datawidth} CONFIG.c_include_s2mm {0}] [get_bd_cells dma_[lindex $read_adapter $read_cnt]]
              set_property -dict [list CONFIG.DATA_WIDTH ${datawidth}] [get_bd_cells reg_[lindex $read_adapter $read_cnt]]
              connect_bd_intf_net [get_bd_intf_pins reg_[lindex $read_adapter $read_cnt]/data_out] [get_bd_intf_pins ${sink_block}]  
              connect_bd_net $clockport [get_bd_pins dma_[lindex $read_adapter $read_cnt]/m_axi_mm2s_aclk]
              connect_bd_net $clockport [get_bd_pins dma_[lindex $read_adapter $read_cnt]/s_axi_lite_aclk]
              connect_bd_net $clockport [get_bd_pins reg_[lindex $read_adapter $read_cnt]/s00_axi_aclk]
              connect_bd_net [get_bd_pins dma_[lindex $read_adapter $read_cnt]/axi_resetn] [get_bd_pins proc_sys_reset_0/peripheral_aresetn]
              connect_bd_net [get_bd_pins reg_[lindex $read_adapter $read_cnt]/s00_axi_aresetn] [get_bd_pins proc_sys_reset_0/peripheral_aresetn]
              connect_bd_intf_net [get_bd_intf_pins dma_[lindex $read_adapter $read_cnt]/M_AXIS_MM2S] [get_bd_intf_pins reg_[lindex $read_adapter $read_cnt]/from_dma]
              connect_bd_intf_net [get_bd_intf_pins dma_[lindex $read_adapter $read_cnt]/M_AXI_MM2S] [get_bd_intf_pins smartconnect_0/S0[expr ${adapter_cnt}]_AXI]
              connect_bd_intf_net [get_bd_intf_pins dma_[lindex $read_adapter $read_cnt]/S_AXI_LITE] -boundary_type upper [get_bd_intf_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2]_AXI]
              set_property -dict [list CONFIG.NUM_MI [expr [get_property CONFIG.NUM_MI [get_bd_cells axi_interconnect_0]] + 1]] [get_bd_cells axi_interconnect_0]
              connect_bd_intf_net [get_bd_intf_pins reg_[lindex $read_adapter $read_cnt]/S00_AXI_read_adapter] -boundary_type upper [get_bd_intf_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2+1]_AXI]
              connect_bd_net $clockport [get_bd_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2+1]_ACLK]
              connect_bd_net [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2+1]_ARESETN]
              group_bd_cells [lindex $read_adapter $read_cnt] [get_bd_cells reg_[lindex $read_adapter $read_cnt]] [get_bd_cells dma_[lindex $read_adapter $read_cnt]]
              incr read_cnt
              incr adapter_cnt
            }
         } elseif {$src_block == "extern"} {
              puts "Make ${sink_block} external"  
              make_bd_intf_pins_external [get_bd_intf_pins ${sink_block}]			  
         } elseif {$sink_block == "sw"} {
            if {[llength write_adapter] > 0} {
              if {$adapter_cnt >0} {
                set_property -dict [list CONFIG.NUM_MI [expr [get_property CONFIG.NUM_MI [get_bd_cells axi_interconnect_0]] + 1]] [get_bd_cells axi_interconnect_0]
                connect_bd_net $clockport [get_bd_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2]_ACLK]
                connect_bd_net [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2]_ARESETN]
                set_property -dict [list CONFIG.NUM_SI [expr [get_property CONFIG.NUM_SI [get_bd_cells smartconnect_0]] + 1]] [get_bd_cells smartconnect_0]
              }
              # generate write adapter to write to memory
              puts "create write_adapter [lindex $write_adapter $write_cnt]"    
              set datawidth [expr 8 * [get_property CONFIG.TDATA_NUM_BYTES [get_bd_intf_pins ${src_block}]]]
              create_bd_cell -type ip -vlnv FAU:smoc_synth:write_adapter reg_[lindex $write_adapter $write_cnt] 
              create_bd_cell -type ip -vlnv xilinx.com:ip:axi_dma dma_[lindex $write_adapter $write_cnt]
              set_property -dict [list CONFIG.c_include_sg {0} CONFIG.c_sg_include_stscntrl_strm {0} CONFIG.c_include_mm2s {0}] [get_bd_cells dma_[lindex $write_adapter $write_cnt]]
              set_property -dict [list CONFIG.DATA_WIDTH ${datawidth}] [get_bd_cells reg_[lindex $write_adapter $write_cnt]]
              connect_bd_intf_net [get_bd_intf_pins ${src_block}] [get_bd_intf_pins reg_[lindex $write_adapter $write_cnt]/data_in]  
              connect_bd_net $clockport [get_bd_pins dma_[lindex $write_adapter $write_cnt]/m_axi_s2mm_aclk]
              connect_bd_net $clockport [get_bd_pins dma_[lindex $write_adapter $write_cnt]/s_axi_lite_aclk]
              connect_bd_net $clockport [get_bd_pins reg_[lindex $write_adapter $write_cnt]/s00_axi_aclk]
              connect_bd_net [get_bd_pins dma_[lindex $write_adapter $write_cnt]/axi_resetn] [get_bd_pins proc_sys_reset_0/peripheral_aresetn]
              connect_bd_net [get_bd_pins reg_[lindex $write_adapter $write_cnt]/s00_axi_aresetn] [get_bd_pins proc_sys_reset_0/peripheral_aresetn]
              connect_bd_intf_net [get_bd_intf_pins dma_[lindex $write_adapter $write_cnt]/S_AXIS_S2MM] [get_bd_intf_pins reg_[lindex $write_adapter $write_cnt]/to_dma] 
              connect_bd_intf_net [get_bd_intf_pins dma_[lindex $write_adapter $write_cnt]/M_AXI_S2MM] [get_bd_intf_pins smartconnect_0/S0[expr ${adapter_cnt}]_AXI]
              connect_bd_intf_net [get_bd_intf_pins dma_[lindex $write_adapter $write_cnt]/S_AXI_LITE] -boundary_type upper [get_bd_intf_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2]_AXI]
              set_property -dict [list CONFIG.NUM_MI [expr [get_property CONFIG.NUM_MI [get_bd_cells axi_interconnect_0]] + 1]] [get_bd_cells axi_interconnect_0]
              connect_bd_intf_net [get_bd_intf_pins reg_[lindex $write_adapter $write_cnt]/S00_AXI_write_adapter] -boundary_type upper [get_bd_intf_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2+1]_AXI]
              connect_bd_net $clockport [get_bd_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2+1]_ACLK]
              connect_bd_net [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins axi_interconnect_0/M0[expr ${adapter_cnt}*2+1]_ARESETN]
              group_bd_cells [lindex $write_adapter $write_cnt] [get_bd_cells dma_[lindex $write_adapter $write_cnt]] [get_bd_cells reg_[lindex $write_adapter $write_cnt]]
              incr write_cnt
              incr adapter_cnt
            }
         } elseif {$sink_block == "extern"} {
              puts "Make ${src_block} external"  
              make_bd_intf_pins_external [get_bd_intf_pins ${src_block}]
         } else {
            puts "Connect ${src_block} with ${sink_block}"  
            connect_bd_intf_net [get_bd_intf_pins ${src_block}] [get_bd_intf_pins ${sink_block}]  
         }
      }
    }   

if {$hwswdesign == "true"} {
# Use Address Editor to automatically map addresses 
assign_bd_address
}

regenerate_bd_layout

# create hdl wrapper
make_wrapper -files [get_files "$proj_dir/$PROJNAME.srcs/sources_1/bd/design_1/design_1.bd"] -top
add_files -norecurse "$proj_dir/$PROJNAME.srcs/sources_1/bd/design_1/hdl/design_1_wrapper.vhd"
puts "INFO: Project created:$PROJNAME"

if {[catch {
#generate testbench
tclapp::xilinx::designutils::write_ip_integrator_testbench -addToProject -output "$proj_dir/$PROJNAME.sim/test_design_1.vhd"
       }]} {
   puts "It seems xilinx designutils are not installed on your Vivado version. Try to intall them from the Xilinx Tcl store to use this feature"  
}

source $tb_lib_dir/createTB.tcl
add_files -fileset sim_1 -norecurse "$proj_dir/$PROJNAME.sim/test_design_1.vhd"
set_property top test_design_1 [get_filesets sim_1]
source $tb_lib_dir/updateTBports.tcl
# save block design
save_bd_design design_1

puts "INFO: Testbench created:$PROJNAME"
